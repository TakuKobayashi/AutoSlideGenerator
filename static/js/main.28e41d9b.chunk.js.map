{"version":3,"sources":["AutoSlideGeneratorLogo.png","Background.mp4","Background.webm","Background.jpg","App.js","action/app.js","container/app.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","words","searchWebsiteType","exportType","pushEnable","loading","slideTitle","googleAccount","googleSlides","responseGoogle","bind","assertThisInitialized","generateSlideSubmit","onSelectChanged","onPushChecked","event","setState","generateSlideRequest","preventDefault","console","log","defineProperty","target","name","value","slideWords","join","split","length","axios","post","process","googleAccessToken","accessToken","presentationProperty","title","res","concat","data","checked","response","profileObj","tokenObj","googleId","tokenId","_this2","slideLinks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","slide","url","presentationId","push","react_default","a","createElement","key","href","err","className","autoPlay","loop","muted","poster","backgroundVideoJpg","id","src","backgroundVideoWebm","type","backgroundVideoMP4","logo","alt","google_login_default","clientId","buttonText","responseType","accessType","onSuccess","onFailure","cookiePolicy","components","placeholder","onChange","e","rows","icon","index_es","faCog","label","options","onClick","variant","isLoading","React","Component","app","googleLogin","connect","dispatch","googleAccountObj","actions","Boolean","window","location","hostname","match","initialState","persistConfig","storage","persistedReducer","persistReducer","arguments","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","container_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28e41d9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AutoSlideGeneratorLogo.f86f89da.png\";","module.exports = __webpack_public_path__ + \"static/media/Background.a0534386.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Background.04c3c683.webm\";","module.exports = __webpack_public_path__ + \"static/media/Background.0707892f.jpg\";","import React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport logo from './AutoSlideGeneratorLogo.png';\nimport backgroundVideoMP4 from './Background.mp4';\nimport backgroundVideoWebm from './Background.webm';\nimport backgroundVideoJpg from './Background.jpg';\nimport './App.css';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Input, Accordion, AccordionSection, Select, Button, CheckboxToggle, Textarea } from 'react-rainbow-components';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      searchWebsiteType: 'google',\n      exportType: 'googleSlide',\n      pushEnable: false,\n      loading: false,\n      slideTitle: '',\n      googleAccount: {},\n      googleSlides: [],\n    };\n\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.generateSlideSubmit = this.generateSlideSubmit.bind(this);\n    this.onSelectChanged = this.onSelectChanged.bind(this);\n    this.onPushChecked = this.onPushChecked.bind(this);\n  }\n\n  generateSlideSubmit(event) {\n    this.setState({ loading: true });\n    this.generateSlideRequest();\n    event.preventDefault();\n  }\n\n  onSelectChanged(event) {\n    console.log(event);\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  async generateSlideRequest() {\n    console.log(this.state);\n    const slideWords = this.state.words.join(',').split(',');\n    if (slideWords.length <= 0) {\n      return;\n    }\n    let slideTitle = this.state.slideTitle;\n    if (!slideTitle) {\n      slideTitle = slideWords[0];\n    }\n    console.log(this.state.googleAccount);\n    const res = await axios.post(process.env.REACT_APP_API_ROOT_URL + '/slide/generate', {\n      words: slideWords.join(','),\n      searchWebsiteType: this.state.searchWebsiteType,\n      exportType: this.state.exportType,\n      pushEnable: this.state.pushEnable,\n      googleAccessToken: this.state.googleAccount.accessToken || \"ya29.Il-wB6kKaCwHpPEzDPSFwggf8NKJOAsSvyJwbIt5Cs3sb_zxquLXGdVO7Mxw7AOvBRoEIucTo3w0inmp_plGMpdPG_NPK6V4AFVaFqWhYN5gwocuEJtka6LLr9cYqK1_Jw\",\n      presentationProperty: {\n        title: slideTitle,\n      },\n    });\n    console.log(res);\n    this.setState({\n      loading: false,\n      googleSlides: this.state.googleSlides.concat([res.data]),\n    });\n  }\n\n  onPushChecked(event, checked) {\n    console.log(event);\n    console.log(checked);\n    this.setState({ pushEnable: checked });\n  }\n\n  responseGoogle(response) {\n    this.setState({\n      googleAccount: {\n        profileObj: response.profileObj,\n        tokenObj: response.tokenObj,\n        accessToken: response.accessToken,\n        googleId: response.response,\n        tokenId: response.tokenId,\n      },\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    const slideLinks = []\n    for(const slide of this.state.googleSlides){\n      const url = \"https://docs.google.com/presentation/d/\" + slide.presentationId + \"/edit\"\n      slideLinks.push(<li key={slide.presentationId}><a href={url}>{slide.title}</a></li>);\n    }\n\n    return (\n      <div className=\"App\">\n        <video autoPlay loop muted poster={backgroundVideoJpg} id=\"bgvid\">\n          <source src={backgroundVideoWebm} type=\"video/webm\" />\n          <source src={backgroundVideoMP4} type=\"video/mp4\" />\n        </video>\n        <div>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <p>\n          Google SlideでSlideを作成する場合はGoogleにLoginしてください:\n          <GoogleLogin\n            clientId={process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID}\n            buttonText=\"Login\"\n            responseType=\"id_token code\"\n            accessType=\"online\"\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n            cookiePolicy={'single_host_origin'}\n          />\n        </p>\n        <div className=\"rainbow-p-vertical_large rainbow-p-horizontal_xx-large rainbow-m-horizontal_xx-large\">\n          <Card>\n            <Textarea\n              placeholder=\"スライドにしたい画像のキーワードを,(カンマ区切り)で入力していってください\"\n              onChange={(e) => this.setState({ words: [e.target.value] })}\n              rows={2}\n            />\n\n            <Accordion>\n              <AccordionSection icon={<FontAwesomeIcon icon={faCog} className=\"rainbow-color_brand\" />} label=\"詳細設定\">\n                <Select\n                  label=\"素材の収集元\"\n                  options={[\n                    { value: 'google', label: 'Google画像検索' },\n                    { value: 'twitter', label: 'Twitter' },\n                    { value: 'instagram', label: 'Instagram' },\n                  ]}\n                  onChange={this.onSelectChanged}\n                />\n                <Input\n                  label=\"slide title\"\n                  placeholder=\"スライド名を決めたい場合は入力してください\"\n                  onChange={(e) => this.setState({ slideTitle: e.target.value })}\n                  type=\"text\"\n                />\n                <Select\n                  label=\"Slideの出力先\"\n                  options={[{ value: 'googleSlide', label: 'Google Slide' }, { value: 'html', label: 'HTML' }]}\n                  name=\"exportType\"\n                  value={this.state.exportType}\n                  onChange={this.onSelectChanged}\n                />\n                <CheckboxToggle\n                  label=\"出来上がったらプッシュ通知でお知らせする\"\n                  value={this.state.pushEnable}\n                  onChange={this.onPushChecked}\n                />\n              </AccordionSection>\n            </Accordion>\n            <Button label=\"作成する\" onClick={this.generateSlideSubmit} variant=\"brand\" isLoading={this.state.loading} />\n          </Card>\n        </div>\n        <ul>\n          {slideLinks}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  googleLogin: () => {\n    return { type: 'GoogleAccount' };\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport App from '../App';\nimport actions from '../action/app';\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    googleLogin: (googleAccountObj) => {\n      dispatch(actions.googleLogin(googleAccountObj));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  googleAccount: {},\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'GoogleAccount': {\n      return { googleAccount: state.googleAccount };\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport './index.css';\nimport App from './container/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './reducer';\n\n// 永続化の設定\nconst persistConfig = {\n  key: 'root', // Storageに保存されるキー名を指定する\n  storage, // 保存先としてlocalStorageがここで設定される\n  //whitelist: ['todos'] // Stateは`todos`のみStorageに保存する\n  // blacklist: ['visibilityFilter'] // `visibilityFilter`は保存しない\n};\n\n// 永続化設定されたReducerとして定義\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}