{"version":3,"sources":["AutoSlideGeneratorLogo.png","Background.mp4","Background.webm","Background.jpg","compoments/generate-slide-form.js","App.js","action/app.js","container/app.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","GenerateSlideForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","words","searchWebsiteType","exportType","pushEnable","loading","slideTitle","googleAccount","console","log","generateSlideSubmit","bind","assertThisInitialized","onSelectChanged","onPushChecked","event","setState","generateSlideRequest","preventDefault","defineProperty","target","name","value","slideWords","join","split","length","axios","post","googleAccessToken","accessToken","presentationProperty","title","res","checked","_this2","react_default","a","createElement","className","components","placeholder","onChange","e","rows","icon","index_es","faCog","label","options","type","onClick","variant","isLoading","React","Component","App","isSignedIn","responseGoogle","response","googleLogin","profileObj","tokenObj","googleId","tokenId","autoPlay","loop","muted","poster","backgroundVideoJpg","id","src","backgroundVideoWebm","backgroundVideoMP4","logo","alt","google_login_default","clientId","process","buttonText","responseType","accessType","onSuccess","onFailure","cookiePolicy","generate_slide_form_GenerateSlideForm","app","connect","dispatch","googleAccountObj","actions","Boolean","window","location","hostname","match","initialState","persistConfig","key","storage","persistedReducer","persistReducer","arguments","undefined","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","container_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e010d574.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AutoSlideGeneratorLogo.f86f89da.png\";","module.exports = __webpack_public_path__ + \"static/media/Background.a0534386.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Background.04c3c683.webm\";","module.exports = __webpack_public_path__ + \"static/media/Background.0707892f.jpg\";","import React from 'react';\nimport axios from 'axios';\nimport Push from 'push.js';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faUsers, faCog } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Input, Accordion, AccordionSection, Select, Button, CheckboxToggle, Textarea } from 'react-rainbow-components';\n\nexport default class GenerateSlideForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      words: [],\n      searchWebsiteType: 'google',\n      exportType: 'googleSlide',\n      pushEnable: false,\n      loading: false,\n      slideTitle: '',\n      googleAccount: this.props.googleAccount || {},\n    };\n    console.log(this.state);\n\n    this.generateSlideSubmit = this.generateSlideSubmit.bind(this);\n    this.onSelectChanged = this.onSelectChanged.bind(this);\n    this.onPushChecked = this.onPushChecked.bind(this);\n  }\n\n  generateSlideSubmit(event) {\n    this.setState({ loading: true });\n    /*\n    if (!Push.Permission.has()) {\n      const self = this;\n      Push.Permission.request(\n        () => {\n          self.generateSlideRequest();\n        },\n        () => {\n          self.generateSlideRequest();\n        },\n      );\n    } else {\n      this.generateSlideRequest();\n    }\n    */\n    this.generateSlideRequest();\n    event.preventDefault();\n  }\n\n  onSelectChanged(event) {\n    console.log(event);\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  async generateSlideRequest() {\n    console.log(this.state);\n    const slideWords = this.state.words.join(',').split(',');\n    if (slideWords.length <= 0) {\n      return;\n    }\n    let slideTitle = this.state.slideTitle;\n    if (!slideTitle) {\n      slideTitle = slideWords[0];\n    }\n    const res = await axios.post(process.env.REACT_APP_API_ROOT_URL + '/slide/generate', {\n      words: slideWords.join(','),\n      searchWebsiteType: this.state.searchWebsiteType,\n      exportType: this.state.exportType,\n      pushEnable: this.state.pushEnable,\n      googleAccessToken: this.state.googleAccount.accessToken,\n      presentationProperty: {\n        title: slideTitle,\n      },\n    });\n    this.setState({ loading: false });\n    console.log(res);\n  }\n\n  onPushChecked(event, checked) {\n    console.log(event);\n    console.log(checked);\n    this.setState({ pushEnable: checked });\n  }\n\n  render() {\n    return (\n      <div className=\"rainbow-p-vertical_large rainbow-p-horizontal_xx-large rainbow-m-horizontal_xx-large\">\n        <Card>\n          <Textarea\n            placeholder=\"スライドにしたい画像のキーワードを,(カンマ区切り)で入力していってください\"\n            onChange={(e) => this.setState({ words: [e.target.value] })}\n            rows={2}\n          />\n\n          <Accordion>\n            <AccordionSection icon={<FontAwesomeIcon icon={faCog} className=\"rainbow-color_brand\" />} label=\"詳細設定\">\n              <Select\n                label=\"素材の収集元\"\n                options={[\n                  { value: 'google', label: 'Google画像検索' },\n                  { value: 'twitter', label: 'Twitter' },\n                  { value: 'flickr', label: 'Flickr' },\n                  { value: 'instagram', label: 'Instagram' },\n                ]}\n                onChange={this.onSelectChanged}\n              />\n              <Input\n                label=\"slide title\"\n                placeholder=\"スライド名を決めたい場合は入力してください\"\n                onChange={(e) => this.setState({ slideTitle: e.target.value })}\n                type=\"text\"\n              />\n              <Select\n                label=\"Slideの出力先\"\n                options={[{ value: 'googleSlide', label: 'Google Slide' }, { value: 'html', label: 'HTML' }]}\n                name=\"exportType\"\n                value={this.state.exportType}\n                onChange={this.onSelectChanged}\n              />\n              <CheckboxToggle\n                label=\"出来上がったらプッシュ通知でお知らせする\"\n                value={this.state.pushEnable}\n                onChange={this.onPushChecked}\n              />\n            </AccordionSection>\n          </Accordion>\n          <Button label=\"作成する\" onClick={this.generateSlideSubmit} variant=\"brand\" isLoading={this.state.loading} />\n        </Card>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport logo from './AutoSlideGeneratorLogo.png';\nimport backgroundVideoMP4 from './Background.mp4';\nimport backgroundVideoWebm from './Background.webm';\nimport backgroundVideoJpg from './Background.jpg';\nimport './App.css';\nimport GenerateSlideForm from './compoments/generate-slide-form';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSignedIn: false,\n    };\n    this.responseGoogle = this.responseGoogle.bind(this);\n  }\n\n  responseGoogle(response) {\n    this.setState({\n      googleLogin: {\n        profileObj: response.profileObj,\n        tokenObj: response.tokenObj,\n        accessToken: response.accessToken,\n        googleId: response.response,\n        tokenId: response.tokenId,\n      },\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <video autoPlay loop muted poster={backgroundVideoJpg} id=\"bgvid\">\n          <source src={backgroundVideoWebm} type=\"video/webm\" />\n          <source src={backgroundVideoMP4} type=\"video/mp4\" />\n        </video>\n        <div>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <p>\n          Google SlideでSlideを作成する場合はGoogleにLoginしてください:\n          <GoogleLogin\n            clientId={process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID}\n            buttonText=\"Login\"\n            responseType=\"id_token code\"\n            accessType=\"online\"\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n            cookiePolicy={'single_host_origin'}\n          />\n        </p>\n        <GenerateSlideForm {...this.props} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  googleLogin: () => {\n    return { type: 'GoogleAccount' };\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport App from '../App';\nimport actions from '../action/app';\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    googleLogin: (googleAccountObj) => {\n      dispatch(actions.googleLogin(googleAccountObj));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  googleAccount: {},\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'GoogleAccount': {\n      return { googleAccount: state.googleAccount };\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport './index.css';\nimport App from './container/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './reducer';\n\n// 永続化の設定\nconst persistConfig = {\n  key: 'root', // Storageに保存されるキー名を指定する\n  storage, // 保存先としてlocalStorageがここで設定される\n  //whitelist: ['todos'] // Stateは`todos`のみStorageに保存する\n  // blacklist: ['visibilityFilter'] // `visibilityFilter`は保存しない\n};\n\n// 永続化設定されたReducerとして定義\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}