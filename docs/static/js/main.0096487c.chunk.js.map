{"version":3,"sources":["compoments/generate-slide-form.js","compoments/google-login-button.js","App.js","action/app.js","container/app.js","serviceWorker.js","reducer.js","index.js","AutoSlideGeneratorLogo.png","Background.mp4","Background.webm","Background.jpg"],"names":["GenerateSlideForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","q","searchWebsiteType","exportType","pushEnable","loading","generateSlideSubmit","bind","assertThisInitialized","onSelectChanged","onPushChecked","event","setState","Push","Permission","has","generateSlideRequest","self","request","preventDefault","console","log","defineProperty","target","name","value","axios","post","res","checked","_this2","googleAccount","react_default","a","createElement","FormControl","TextField","label","placeholder","fullWidth","onChange","e","lib","isOpened","InputLabel","htmlFor","Select","autoWidth","MenuItem","FormHelperText","FormControlLabel","control","Checkbox","Button","variant","size","color","onClick","disabled","CircularProgress","React","Component","GoogleLoginButton","response","googleLogin","google_login_default","clientId","process","buttonText","responseType","accessType","onSuccess","responseGoogle","onFailure","cookiePolicy","App","className","autoPlay","loop","muted","poster","backgroundVideoJpg","id","src","backgroundVideoWebm","type","backgroundVideoMP4","google_login_button_GoogleLoginButton","logo","alt","generate_slide_form_GenerateSlideForm","app","connect","dispatch","actions","Boolean","window","location","hostname","match","initialState","persistConfig","key","storage","persistedReducer","persistReducer","arguments","length","undefined","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","container_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0096487c.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Collapse } from 'react-collapse';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Push from 'push.js';\n\nexport default class GenerateSlideForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      q: '',\n      searchWebsiteType: 'google',\n      exportType: 'googleSlide',\n      pushEnable: false,\n      loading: false,\n    };\n\n    this.generateSlideSubmit = this.generateSlideSubmit.bind(this);\n    this.onSelectChanged = this.onSelectChanged.bind(this);\n    this.onPushChecked = this.onPushChecked.bind(this);\n  }\n\n  generateSlideSubmit(event) {\n    this.setState({ loading: true });\n    if (!Push.Permission.has()) {\n      const self = this;\n      Push.Permission.request(\n        () => {\n          self.generateSlideRequest();\n        },\n        () => {\n          self.generateSlideRequest();\n        },\n      );\n    } else {\n      this.generateSlideRequest();\n    }\n    event.preventDefault();\n  }\n\n  onSelectChanged(event) {\n    console.log(event);\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  async generateSlideRequest() {\n    console.log(this.state);\n    const res = await axios.post('https://ufnk35q9zh.execute-api.ap-northeast-1.amazonaws.com/dev/hello', this.state);\n    this.setState({ loading: false });\n    console.log(res);\n  }\n\n  onPushChecked(event, checked) {\n    console.log(event);\n    console.log(checked);\n    this.setState({ pushEnable: checked });\n  }\n\n  render() {\n    const googleAccount = this.props.googleAccount;\n    return (\n      <FormControl>\n        <TextField\n          label=\"slide titles\"\n          placeholder=\"スライドにしたい画像のキーワードを,(カンマ区切り)で入力していってください\"\n          fullWidth={true}\n          onChange={(e) => this.setState({ q: e.target.value })}\n        />\n        <Collapse isOpened={true || false}>\n          <InputLabel htmlFor=\"age-simple\">Age</InputLabel>\n          <Select onChange={this.onSelectChanged} autoWidth={true} name=\"searchWebsiteType\" value={this.state.searchWebsiteType}>\n            <MenuItem value=\"google\">Google画像検索</MenuItem>\n            <MenuItem value=\"twitter\">Twitter</MenuItem>\n            <MenuItem value=\"flickr\">Flickr</MenuItem>\n            <MenuItem value=\"instagram\">Instagram</MenuItem>\n          </Select>\n          <FormHelperText>Label + placeholder</FormHelperText>\n          <Select onChange={this.onSelectChanged} name=\"exportType\" value={this.state.exportType}>\n            <MenuItem value=\"googleSlide\">Google Slide</MenuItem>\n            <MenuItem value=\"html\">HTML</MenuItem>\n          </Select>\n          <FormControlLabel\n            control={<Checkbox checked={this.state.pushEnable} onChange={this.onPushChecked} />}\n            label=\"出来上がったらプッシュ通知でお知らせする\"\n          />\n        </Collapse>\n        <Button variant=\"contained\" size=\"large\" fullWidth={true} color=\"primary\" onClick={this.generateSlideSubmit} disabled={this.state.loading}>\n          {this.state.loading ? <CircularProgress /> : '作成する'}\n        </Button>\n      </FormControl>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\nimport axios from 'axios';\n\nexport default class GoogleLoginButton extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n  }\n\n  responseGoogle(response) {\n    console.log(response);\n    /*\n    axios.post(\"https://www.googleapis.com/oauth2/v4/token\", {\n      code: response.code,\n      grant_type: \"authorization_code\",\n      client_id: process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID,\n      client_secret:  process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_SECRET,\n      redirect_uri: \"https://takukobayashi.github.io/AutoSlideGenerator/\",\n    }).then(decoded => {\n      console.log(decoded);\n    })\n    */\n    this.props.googleLogin(response);\n  }\n\n  render() {\n    return (\n      <GoogleLogin\n        clientId={process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID}\n        buttonText=\"Login\"\n        responseType=\"id_token code\"\n        accessType=\"online\"\n        onSuccess={this.responseGoogle}\n        onFailure={this.responseGoogle}\n        cookiePolicy={'single_host_origin'}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport logo from './AutoSlideGeneratorLogo.png';\nimport backgroundVideoMP4 from './Background.mp4';\nimport backgroundVideoWebm from './Background.webm';\nimport backgroundVideoJpg from './Background.jpg';\nimport './App.css';\nimport GenerateSlideForm from './compoments/generate-slide-form';\nimport GoogleLoginButton from './compoments/google-login-button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <video autoPlay loop muted poster={backgroundVideoJpg} id=\"bgvid\">\n            <source src={backgroundVideoWebm} type=\"video/webm\" />\n            <source src={backgroundVideoMP4} type=\"video/mp4\" />\n          </video>\n          <GoogleLoginButton />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <GenerateSlideForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  googleLogin: () => {\n    return { type: 'GoogleAccount' };\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport App from '../App';\nimport actions from '../action/app';\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    googleLogin: (response) => {\n      console.log(\"record\");\n      console.log(response);\n      dispatch(actions.googleLogin(response));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  googleAccount: {},\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'GoogleAccount': {\n      return { googleAccount: state.googleAccount };\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport './index.css';\nimport App from './container/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './reducer';\n\n// 永続化の設定\nconst persistConfig = {\n  key: 'root', // Storageに保存されるキー名を指定する\n  storage, // 保存先としてlocalStorageがここで設定される\n  //whitelist: ['todos'] // Stateは`todos`のみStorageに保存する\n  // blacklist: ['visibilityFilter'] // `visibilityFilter`は保存しない\n};\n\n// 永続化設定されたReducerとして定義\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/AutoSlideGeneratorLogo.f86f89da.png\";","module.exports = __webpack_public_path__ + \"static/media/Background.a0534386.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Background.04c3c683.webm\";","module.exports = __webpack_public_path__ + \"static/media/Background.0707892f.jpg\";"],"sourceRoot":""}