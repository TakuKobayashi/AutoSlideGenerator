{"version":3,"sources":["AutoSlideGeneratorLogo.png","compoments/generate-slide-form.js","compoments/google-login-button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GenerateSlideForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","generateSlideSubmit","bind","assertThisInitialized","event","Push","Permission","has","request","onGranted","onDenied","generateSlideRequest","preventDefault","process","axios","post","res","googleAccount","react_default","a","createElement","onSubmit","className","JSON","stringify","type","name","lib","isOpened","value","React","Component","GoogleLoginButton","response","google_login_default","clientId","buttonText","onSuccess","responseGoogle","onFailure","cookiePolicy","App","accounts","google","google_login_button_GoogleLoginButton","src","logo","alt","generate_slide_form_GenerateSlideForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oWCMnBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,QAAQC,IAAIT,GAEZC,EAAKS,oBAAsBT,EAAKS,oBAAoBC,KAAzBT,OAAAU,EAAA,EAAAV,CAAAD,IAJVA,mFAOCY,GACfC,IAAKC,WAAWC,MACjBF,IAAKC,WAAWE,QAAQb,KAAKc,UAAWd,KAAKe,UAE7Cf,KAAKgB,uBAEPP,EAAMQ,qDAINjB,KAAKgB,0DAILhB,KAAKgB,2LAILZ,QAAQC,IAAIa,2FACMC,IAAMC,KAAKF,wGAAvBG,SACNjB,QAAQC,IAAIgB,iIAIZ,IAAMC,EAAgBtB,KAAKJ,MAAM0B,cACjC,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAU1B,KAAKM,oBAAqBqB,UAAU,aAClDJ,EAAAC,EAAAC,cAAA,WAAMG,KAAKC,UAAUP,IACrBC,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,MACxBR,EAAAC,EAAAC,cAACO,EAAA,SAAD,CAAUC,UAAU,GAClBV,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASI,MAAM,2BAAOP,UAAU,4CAxCLQ,IAAMC,4BCFhCC,cACnB,SAAAA,EAAYzC,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,GAAAvC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KACZJ,gFAGO0C,GACbtC,KAAKJ,MAAM0B,cAAgBgB,EAC3BlC,QAAQC,IAAIiC,oCAIZ,OACEf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,SAAUtB,2EACVuB,WAAW,QACXC,UAAW1C,KAAK2C,eAChBC,UAAW5C,KAAK2C,eAChBE,aAAc,8BAjByBV,IAAMC,WCyBtCU,cArBb,SAAAA,EAAYlD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACjBjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KACDmD,SAAW,CACdC,OAAQ,IAHOnD,wEAQjB,IAAMyB,EAAgBtB,KAAK+C,SAASC,OACpC,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAACwB,EAAD,CAAmB3B,cAAeA,IAClCC,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,SACzC7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAmB/B,cAAeA,aAf1Ba,IAAMC,WCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.85597ea0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AutoSlideGeneratorLogo.f86f89da.png\";","import React from 'react';\nimport purecss from 'purecss';\nimport axios from 'axios';\nimport {Collapse} from 'react-collapse';\nimport Push from 'push.js';\n\nexport default class GenerateSlideForm extends React.Component{\n  constructor(props) {\n    super(props);\n    console.log(props);\n\n    this.generateSlideSubmit = this.generateSlideSubmit.bind(this);\n  }\n\n  generateSlideSubmit(event){\n    if(Push.Permission.has()){\n      Push.Permission.request(this.onGranted, this.onDenied);\n    }else{\n      this.generateSlideRequest();\n    }\n    event.preventDefault();\n  }\n\n  onGranted(){\n    this.generateSlideRequest();\n  }\n\n  onDenied(){\n    this.generateSlideRequest();\n  }\n\n  async generateSlideRequest(){\n    console.log(process.env.REACT_APP_API_ROOT_URL);\n    const res = await axios.post(process.env.REACT_APP_API_ROOT_URL + \"/slide/generate\")\n    console.log(res);\n  }\n\n  render(){\n    const googleAccount = this.props.googleAccount;\n    return (\n      <form onSubmit={this.generateSlideSubmit} className=\"pure-form\">\n        <div>{JSON.stringify(googleAccount)}</div>\n        <input type=\"text\" name=\"q\" />\n        <Collapse isOpened={true || false}>\n          <div>Random content</div>\n        </Collapse>\n        <input type=\"submit\" value=\"作成する\" className=\"pure-button pure-button-primary\" />\n      </form>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n\nexport default class GoogleLoginButton extends React.Component{\n  constructor(props) {\n    super(props);\n  }\n\n  responseGoogle(response) {\n    this.props.googleAccount = response;\n    console.log(response);\n  }\n\n  render(){\n    return (\n      <GoogleLogin\n        clientId={process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID}\n        buttonText=\"Login\"\n        onSuccess={this.responseGoogle}\n        onFailure={this.responseGoogle}\n        cookiePolicy={'single_host_origin'}\n      />\n    );\n  }\n}","import React from 'react';\nimport logo from './AutoSlideGeneratorLogo.png';\nimport './App.css';\nimport GenerateSlideForm from './compoments/generate-slide-form';\nimport GoogleLoginButton from './compoments/google-login-button';\nimport purecss from 'purecss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.accounts = {\n      google: {},\n    }\n  }\n\n  render(){\n    const googleAccount = this.accounts.google;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <GoogleLoginButton googleAccount={googleAccount} />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <GenerateSlideForm googleAccount={googleAccount} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}