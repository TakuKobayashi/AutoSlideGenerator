{"version":3,"sources":["AutoSlideGeneratorLogo.png","Background.mp4","Background.webm","Background.jpg","compoments/generate-slide-form.js","compoments/google-login-button.js","App.js","action/app.js","container/app.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","GenerateSlideForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateSlideSubmit","bind","assertThisInitialized","event","Push","Permission","has","generateSlideRequest","self","request","preventDefault","console","log","process","axios","post","res","googleAccount","react_default","a","createElement","onSubmit","className","JSON","stringify","type","name","lib","isOpened","value","React","Component","GoogleLoginButton","response","googleLogin","google_login_default","clientId","buttonText","accessType","onSuccess","responseGoogle","onFailure","cookiePolicy","App","autoPlay","loop","muted","poster","backgroundVideoJpg","id","src","backgroundVideoWebm","backgroundVideoMP4","google_login_button_GoogleLoginButton","logo","alt","generate_slide_form_GenerateSlideForm","app","connect","state","dispatch","actions","Boolean","window","location","hostname","match","initialState","persistConfig","key","storage","persistedReducer","persistReducer","arguments","length","undefined","store","createStore","persistor","persistStore","ReactDOM","render","es","integration_react","loading","container_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0134cdc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AutoSlideGeneratorLogo.f86f89da.png\";","module.exports = __webpack_public_path__ + \"static/media/Background.a0534386.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Background.04c3c683.webm\";","module.exports = __webpack_public_path__ + \"static/media/Background.0707892f.jpg\";","import React from 'react';\nimport purecss from 'purecss';\nimport axios from 'axios';\nimport { Collapse } from 'react-collapse';\nimport Push from 'push.js';\n\nexport default class GenerateSlideForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.generateSlideSubmit = this.generateSlideSubmit.bind(this);\n  }\n\n  generateSlideSubmit(event) {\n    if (!Push.Permission.has()) {\n      const self = this;\n      Push.Permission.request(\n        () => {\n          self.generateSlideRequest();\n        },\n        () => {\n          self.generateSlideRequest();\n        },\n      );\n    } else {\n      this.generateSlideRequest();\n    }\n    event.preventDefault();\n  }\n\n  async generateSlideRequest() {\n    console.log(process.env.REACT_APP_API_ROOT_URL);\n    const res = await axios.post(process.env.REACT_APP_API_ROOT_URL + '/slide/generate');\n    console.log(res);\n  }\n\n  render() {\n    const googleAccount = this.props.googleAccount;\n    return (\n      <form onSubmit={this.generateSlideSubmit} className=\"pure-form\">\n        <div>{JSON.stringify(googleAccount)}</div>\n        <input type=\"text\" name=\"q\" />\n        <Collapse isOpened={true || false}>\n          <div>Random content</div>\n        </Collapse>\n        <input type=\"submit\" value=\"作成する\" className=\"pure-button pure-button-primary\" />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n\nexport default class GoogleLoginButton extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n  }\n\n  responseGoogle(response) {\n    console.log(response);\n    this.props.googleLogin(response);\n  }\n\n  render() {\n    return (\n      <GoogleLogin\n        clientId={process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID}\n        buttonText=\"Login\"\n        accessType=\"offline\"\n        onSuccess={this.responseGoogle}\n        onFailure={this.responseGoogle}\n        cookiePolicy={'single_host_origin'}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport logo from './AutoSlideGeneratorLogo.png';\nimport backgroundVideoMP4 from './Background.mp4';\nimport backgroundVideoWebm from './Background.webm';\nimport backgroundVideoJpg from './Background.jpg';\nimport './App.css';\nimport GenerateSlideForm from './compoments/generate-slide-form';\nimport GoogleLoginButton from './compoments/google-login-button';\nimport purecss from 'purecss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <video autoPlay loop muted poster={backgroundVideoJpg} id=\"bgvid\">\n            <source src={backgroundVideoWebm} type=\"video/webm\" />\n            <source src={backgroundVideoMP4} type=\"video/mp4\" />\n          </video>\n          <GoogleLoginButton />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <GenerateSlideForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  googleLogin: () => {\n    return { type: 'GoogleAccount' };\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport App from '../App';\nimport actions from '../action/app';\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    googleLogin: (response) => {\n      dispatch(actions.googleLogin(response));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  googleAccount: {},\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'GoogleAccount': {\n      return { googleAccount: state.googleAccount };\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport './index.css';\nimport App from './container/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './reducer';\n\n// 永続化の設定\nconst persistConfig = {\n  key: 'root', // Storageに保存されるキー名を指定する\n  storage, // 保存先としてlocalStorageがここで設定される\n  //whitelist: ['todos'] // Stateは`todos`のみStorageに保存する\n  // blacklist: ['visibilityFilter'] // `visibilityFilter`は保存しない\n};\n\n// 永続化設定されたReducerとして定義\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}